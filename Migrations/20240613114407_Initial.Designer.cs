// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SpaProjectManagement;

#nullable disable

namespace SpaProjectManagement.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240613114407_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SpaProjectManagement.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 30589.00m,
                            ClientId = 1,
                            IssueDate = new DateTime(2024, 6, 13, 11, 44, 5, 977, DateTimeKind.Utc).AddTicks(6599),
                            ProjectId = 1,
                            StatusId = 3
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1253.00m,
                            ClientId = 4,
                            IssueDate = new DateTime(2024, 6, 13, 11, 44, 5, 977, DateTimeKind.Utc).AddTicks(6602),
                            PaymentDate = new DateTime(2024, 6, 14, 11, 44, 5, 977, DateTimeKind.Utc).AddTicks(6603),
                            ProjectId = 2,
                            StatusId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 256390.00m,
                            ClientId = 4,
                            IssueDate = new DateTime(2024, 6, 13, 11, 44, 5, 977, DateTimeKind.Utc).AddTicks(6606),
                            ProjectId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 3000.00m,
                            ClientId = 1,
                            IssueDate = new DateTime(2024, 6, 13, 11, 44, 5, 977, DateTimeKind.Utc).AddTicks(6608),
                            ProjectId = 1,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InvoiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Не оплачен"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Оплачен"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Просрочен"
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId", "EffectiveDate")
                        .IsUnique();

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ResponsibleEmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 50000.00m,
                            ClientId = 1,
                            Description = "Creating a luxury spa complex with state-of-the-art facilities.",
                            Name = "Relaxation Oasis",
                            ResponsibleEmployeeId = 2,
                            StartDate = new DateTime(2024, 6, 13, 11, 44, 5, 977, DateTimeKind.Utc).AddTicks(6170),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Budget = 75000.00m,
                            ClientId = 4,
                            Description = "Renovation and expansion of an existing spa resort.",
                            EndDate = new DateTime(2024, 12, 10, 11, 44, 5, 977, DateTimeKind.Utc).AddTicks(6202),
                            Name = "Serenity Springs",
                            ResponsibleEmployeeId = 3,
                            StartDate = new DateTime(2024, 5, 14, 11, 44, 5, 977, DateTimeKind.Utc).AddTicks(6182),
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.ProjectService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedEmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedEmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProjectServices");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProjectStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "На согласовании"
                        },
                        new
                        {
                            Id = 2,
                            Name = "В процессе"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Выполнен"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Отменен"
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Клиент",
                            SystemName = "Client"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Менеджер",
                            SystemName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Администратор",
                            SystemName = "Admin"
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Профессиональное строительство роскошного спа-комплекса",
                            Name = "Строительство Роскошного СПА",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Установка современного оборудования в спа-центре",
                            Name = "Установка Устройств в СПА",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Индивидуальный дизайн и оформление вашего спа-комплекса",
                            Name = "Дизайн и Оформление СПА",
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Роскошное строительство"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Установка оборудования"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Дизайн и оформление"
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Morning Client. Prefers morning appointments",
                            Email = "john.doe@example.com",
                            Login = "john.doe",
                            Name = "John Doe",
                            Password = "123456",
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Expensive Project Manager",
                            Email = "jane.smith@example.com",
                            Login = "jane.smith",
                            Name = "Jane Smith",
                            Password = "123456",
                            Phone = "0987654321"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Genius Architect",
                            Email = "mike.johnson@example.com",
                            Login = "mike.johnson",
                            Name = "Mike Johnson",
                            Password = "123456",
                            Phone = "1122334455"
                        },
                        new
                        {
                            Id = 4,
                            Description = "New User",
                            Email = "alice.brown@example.com",
                            Login = "alice.brown",
                            Name = "Alice Brown",
                            Password = "123456",
                            Phone = "5544332211"
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            Id = 0
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3,
                            Id = 0
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1,
                            Id = 0
                        });
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Invoice", b =>
                {
                    b.HasOne("SpaProjectManagement.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaProjectManagement.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaProjectManagement.Models.InvoiceStatus", "Status")
                        .WithMany("Invoices")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Price", b =>
                {
                    b.HasOne("SpaProjectManagement.Models.Service", "Service")
                        .WithMany("Prices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Project", b =>
                {
                    b.HasOne("SpaProjectManagement.Models.User", "Client")
                        .WithMany("ClientProjects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaProjectManagement.Models.User", "ResponsibleEmployee")
                        .WithMany("ResponsibleProjects")
                        .HasForeignKey("ResponsibleEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaProjectManagement.Models.ProjectStatus", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ResponsibleEmployee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.ProjectService", b =>
                {
                    b.HasOne("SpaProjectManagement.Models.User", "AssignedEmployee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedEmployeeId");

                    b.HasOne("SpaProjectManagement.Models.Project", "Project")
                        .WithMany("ProjectServices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaProjectManagement.Models.Service", "Service")
                        .WithMany("ProjectServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaProjectManagement.Models.ProjectStatus", "Status")
                        .WithMany("ProjectServices")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedEmployee");

                    b.Navigation("Project");

                    b.Navigation("Service");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Service", b =>
                {
                    b.HasOne("SpaProjectManagement.Models.ServiceType", "Type")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.UserRole", b =>
                {
                    b.HasOne("SpaProjectManagement.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaProjectManagement.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.InvoiceStatus", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Project", b =>
                {
                    b.Navigation("ProjectServices");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.ProjectStatus", b =>
                {
                    b.Navigation("ProjectServices");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.Service", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("ProjectServices");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SpaProjectManagement.Models.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("ClientProjects");

                    b.Navigation("ResponsibleProjects");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
